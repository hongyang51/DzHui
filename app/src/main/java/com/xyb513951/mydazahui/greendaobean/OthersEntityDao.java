package com.xyb513951.mydazahui.greendaobean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OTHERS_ENTITY".
*/
public class OthersEntityDao extends AbstractDao<OthersEntity, Void> {

    public static final String TABLENAME = "OTHERS_ENTITY";

    /**
     * Properties of entity OthersEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Thumbnail = new Property(0, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Color = new Property(3, Integer.class, "color", false, "COLOR");
        public final static Property Id = new Property(4, Integer.class, "id", false, "ID");
        public final static Property NewsThemeId = new Property(5, Integer.class, "newsThemeId", false, "NEWS_THEME_ID");
    };


    public OthersEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OthersEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OTHERS_ENTITY\" (" + //
                "\"THUMBNAIL\" TEXT," + // 0: thumbnail
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"NAME\" TEXT," + // 2: name
                "\"COLOR\" INTEGER," + // 3: color
                "\"ID\" INTEGER," + // 4: id
                "\"NEWS_THEME_ID\" INTEGER);"); // 5: newsThemeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OTHERS_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OthersEntity entity) {
        stmt.clearBindings();
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(1, thumbnail);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(4, color);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        Integer newsThemeId = entity.getNewsThemeId();
        if (newsThemeId != null) {
            stmt.bindLong(6, newsThemeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OthersEntity readEntity(Cursor cursor, int offset) {
        OthersEntity entity = new OthersEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // thumbnail
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // newsThemeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OthersEntity entity, int offset) {
        entity.setThumbnail(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNewsThemeId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OthersEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OthersEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
